---
title: "Predicting distributional ranges of rocky intertidal species using a multi-dataset approach"
format: html
embed-resources: true
editor: visual
author: Simons D-L, Hipperson H, Webb TJ, Spencer M, Mieszkowska N
chunk_output_type: inline
toc: true
message: false
warning: false
---

## Introduction

This pipeline replicates all analyses in Simons *et al* (2025) "Predicting distributional ranges of rocky intertidal species using a multi-dataset approach".

Multiple resources have been used in this pipeline, including this [SDM guide](https://rspatial.org/sdm/index.html), Tom's Euro benthos habitat species guide.

## Set-up

### Load packages

```{r}
#| label: load-packages
#| echo: true
#| results: false

packages <- c("devtools",
              "qiime2R", #github download
              "microbiome", #github download
              "tidyverse",
              "vegan",
              "ggforce",
              "phyloseq",
              "cowplot",
              "geosphere",
              'lme4',
              "car",
              "sf",
              "pROC", #ROC and AUC for model validation 
              "ncdf4",
              "raster",
              "lubridate",
              "terra",
              "geodata",
              "predicts",
              "sdmpredictors",
              "tidyterra",
              "exactextractr",
              "arrow",
              "here",
              "emodnet.wfs", #github
              "EMODnetWCS", #github
              "biooracler") #github

new.packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)

invisible(lapply(packages, library, character.only = TRUE))
```

### Functions

```{r}
#| label: OCLE-function

# Function to download environmental information from OCLE database (https://ocle.ihcantabria.com/)

# Predefined available variables for each period
available_variables_historical <- c("pH", "Wind", "TidalRange", "ShearStress", "Salinity", "SST", "PAR", "Nitrate", "MHW", "MCS", "Hs", "Currents", "BottomOrbitalSpeed", "AttenuationCoefficient", "AirTemperature")
available_variables_projected <- c("pH", "Wind", "Salinity", "SST", "SLR", "Nitrates", "Hs", "AirTemperature")

# Function to get available variables based on the selected period
get_available_variables <- function(period) {
  if (period == "Historical") {
    return(available_variables_historical)
  } else if (period == "Projected") {
    return(available_variables_projected)
  } else {
    stop("Invalid period")
  }
}

download_data <- function(period, variable, parameter,
                         temporal_resolution, save_path,
                         year_or_season = NULL,
                         scenario = NULL,
                         lat_max = NULL,
                         lat_min = NULL,
                         lon_min = NULL,
                         lon_max = NULL,
                         output_format = "nc",  # Options: "ascii", "nc", "csv", "rdata"
                         return_object = TRUE
                         ) {
  
  # Load required packages
  if (!requireNamespace("ncdf4", quietly = TRUE)) install.packages("ncdf4")
  if (!requireNamespace("httr", quietly = TRUE)) install.packages("httr")
  if (!requireNamespace("raster", quietly = TRUE)) install.packages("raster")
  library(ncdf4)
  library(httr)
  library(raster)
  
  # Ensure save path exists
  if (!dir.exists(save_path)) dir.create(save_path, recursive = TRUE)
  
  #_________________________
  # Validate output format
  #_________________________
  if (!output_format %in% c("ascii", "nc", "csv", "rdata")) {
   stop("Invalid output_format. Choose 'ascii', 'nc', 'csv', or 'rdata'")
  }
 
  # Construct URL
  base_url <- "https://ihthredds.ihcantabria.com/thredds/fileServer/SIMULIT"
  
  if (period == "Historical") {
    dataset_url <- paste0(base_url, "/",
                          period, "/",
                          variable, "/",
                          variable, "_",
                          ifelse(temporal_resolution == "range", "yearly",
                                 ifelse(temporal_resolution == "full", "all", temporal_resolution)), 
                          ".nc")
  } else if (period == "Projected") {
    dataset_url <- paste0(base_url, "/",
                          period, "/",
                          variable, "/",
                          scenario, "/",#                          year_or_season,
                          variable,# "_",
                          ".nc")
  } else {
    stop("Invalid period")
  }
  
  #_________________________
  # Download file
  #_________________________
  temp_file <- tempfile(fileext = ".nc")
  response <- GET(
  dataset_url,
  write_disk(temp_file, overwrite = TRUE),
  config(followlocation = TRUE),  # Follow redirects (common in THREDDS)
  timeout(3000000),                   # Increase timeout (default: 60s)
  progress()
  )
  if (http_error(response)) stop("Failed to download file")
  
  # Open file
  nc <- nc_open(temp_file)
  on.exit({
    nc_close(nc)
    unlink(temp_file)
  })
  
  #_________________________
  # Get parameter name 
  #_________________________
  
  if(variable =="MHW"|variable =="MCS"){
    parameter <- variable
  full_param_name <- variable
   
  }else{
  full_param_name <- paste0(variable, "_", parameter)
      if (!full_param_name %in% names(nc$var)) {
    stop(paste("Parameter not found. Available parameters:",
               paste(names(nc$var), collapse = ", ")))
  }
  }
  

  
  #______________________________________________________________
  # Handle time dimension differently for seasonal vs yearly data
  #_________________________________________________________
  if (temporal_resolution == "yearly"|temporal_resolution == "range") {

    time_vals <- ncvar_get(nc, "time")
    time_units <- ncatt_get(nc, "time", "units")$value

    if (grepl("days since", time_units)) {
      time_dates <- as.Date(sub(".*since ", "", time_units)) + time_vals
    } else if (grepl("seconds since", time_units)) {
      time_dates <- as.POSIXct(sub(".*since ", "", time_units), tz="UTC") + as.difftime(time_vals, units="secs")
    } else {
      stop("Unrecognized time format")
    }

    time_years <- as.integer(format(time_dates, "%Y"))
    print(paste("Available years:", paste(unique(time_years), collapse=", ")))

    #______________________________
    # Selecting the required years 
    #______________________________
    if (length(year_or_season)== 1) {
      year_index <- which(time_years == as.numeric(year_or_season))
      if (length(year_index) == 0) stop("Requested year not available")
      data <- ncvar_get(nc, full_param_name,
                        start = c(1, 1, year_index),
                        count = c(-1, -1, 1))
    }else if(length(year_or_season) >1){
     # For multiple years
      year_indices <- which(time_years %in% year_or_season)
      
      # Get all the data for those years
      data <- ncvar_get(nc, full_param_name, 
                       start = c(1, 1, min(year_indices)), 
                       count = c(-1, -1, length(year_indices)))
            
    } else {
      data <- ncvar_get(nc, full_param_name)
    }
    
  }else {
    # Seasonal data - no time dimension to process
    data <- ncvar_get(nc, full_param_name)
  }
   

  #______________________________________________________
  # Create output file
  #______________________________________________________
  lon <- ncvar_get(nc, "lon")
  lat <- ncvar_get(nc, "lat")
  
  #________________________
  # Filtering by dimensions 
  #________________________
  if (!is.null(lat_max) || !is.null(lat_min) || !is.null(lon_min) || !is.null(lon_max)) {
    
    # Set defaults if NULL (entire range)
    if (is.null(lat_max)) lat_max <- max(lat)
    if (is.null(lat_min)) lat_min <- min(lat)
    if (is.null(lon_max)) lon_max <- max(lon)
    if (is.null(lon_min)) lon_min <- min(lon)
    
    # Find indices for subsetting
    lat_indices <- which(lat >= lat_min & lat <= lat_max)
    lon_indices <- which(lon >= lon_min & lon <= lon_max)
    lon <- lon[lon_indices]
    lat <- lat[lat_indices]
    
  if(period == "Projected"){
    data <- data[lon_indices, lat_indices,]  
  }else{
        # Because year adds another dimension
    if (length(year_or_season)== 1) {
      data <- data[lon_indices, lat_indices]  
    }else if(length(year_or_season) >1){
      data <- data[lon_indices, lat_indices,]  
    }
    
  }

    
  }
  
   #______________________________________________
    # Creating the raster with the correct rotation 
    #_______________________________________________
    if (period == "Projected") { #Create raster with 90-degree counter-clockwise rotation
      rotated_matrix <- t(data)[ncol(data):1,]  # Rotate 90 degrees left
      r <- raster(rotated_matrix,
                  xmn = min(lon), xmx = max(lon),
                  ymn = min(lat), ymx = max(lat),
                  crs = CRS("+proj=longlat +datum=WGS84"))
    }
    if (period == "Historical" & temporal_resolution != "yearly") {
      rotated_matrix <- t(data)[,nrow(data):1]  # Simple right rotation
      r <- raster(rotated_matrix,
                  xmn = min(lon), xmx = max(lon),
                  ymn = min(lat), ymx = max(lat),
                  crs = CRS("+proj=longlat +datum=WGS84"))
      r <-  flip(r, direction = 'x')
    }
    
    if (period == "Historical" & temporal_resolution == "yearly") {
      # Rotate the matrix and create the raster
      rotated_matrix <- t(data)[ncol(data):1,]  # Rotate 90 degrees left
      r <- raster(rotated_matrix,
                  xmn = min(lon), xmx = max(lon),
                  ymn = min(lat), ymx = max(lat),
                  crs = CRS("+proj=longlat +datum=WGS84"))
    }
    
    # Create filename
    fname_base <- paste0(
      variable, 
      if (!variable %in% c("MHW", "MCS", "SLR")) paste0("_", parameter) else "",
      "_",
      if (period == "Historical" && temporal_resolution == "yearly") "yearly_" else "",
      if (period != "Projected") paste0(temporal_resolution, "_") else "",  # Add temporal_resolution if not Projected
      year_or_season,
      if (period == "Projected") paste0("_", scenario) else ""
    )
  
  #_________________________________________
  # Output handling based on user selection
  #_________________________________________
  if (output_format == "ascii") {
    raster::writeRaster(r, file.path(save_path, paste0(fname_base , ".asc")), format = "ascii", overwrite = TRUE)
  } else if (output_format == "nc") {
    raster::writeRaster(r, file.path(save_path, paste0(fname_base, ".nc")), format = "CDF", overwrite = TRUE)
  } else {
    df <- as.data.frame(r, xy = TRUE)
    colnames(df) <- c("lon", "lat", "value")
    
    if (output_format == "csv") {
      write.csv(df, file.path(save_path, paste0(fname_base, ".csv")), row.names = FALSE)
    } else if (output_format == "rdata") {
      save(df, file = file.path(save_path, paste0(fname_base, ".RData")))
    }
  }
  
  if (return_object) {
    if (output_format %in% c("ascii", "nc")) return(r) else return(df)
  } else {
    return(invisible(NULL))
  }
}
```

```{r}
#| label: get-nearest-coastline-function

get_nearest_coastline <- function(environment_stack, occurance_data, condition) {
  
  # Get CRS from raster
  raster_crs <- crs(environment_stack, proj = TRUE)
  
  # Create original points as SpatVector
  points <- vect(occurance_data,
                 geom = c("lon", "lat"),
                 crs = raster_crs)
  
  # Extract environmental values at points
  presvals <- extract(environment_stack, points)
  
  # Identify rows where all extracted values (except ID) are NA
  na_rows <- which(apply(presvals[, -1], 1, function(x) all(is.na(x))))
  
  # Create mask for coastline cells (where condition == 1)
  coastline_mask <- condition == 1
  
  # Extract points representing coastline cells
  coastline_points <- as.points(coastline_mask, values = FALSE)
  
  # Extract coordinates from original points
  coords <- crds(points)
  
  # For each NA point, find closest coastline point and replace coordinates
  for (i in na_rows) {
    this_point <- points[i]
    dists <- distance(this_point, coastline_points)
    nearest_idx <- which.min(dists)
    nearest_coords <- crds(coastline_points[nearest_idx])
    
    coords[i, ] <- nearest_coords
  }
  
  # Rebuild corrected SpatVector with updated coordinates
  corrected_points <- vect(data.frame(occurance_data, coords),
                           geom = c("x", "y"),
                           crs = crs(points))
  
  # Extract environmental variables at corrected points
  presvals_corrected <- extract(environment_stack, corrected_points)
  
  return(presvals_corrected)
}
```

## Occurrence data

### Import eDNA and visual occurrences

Let's first read in our occurrences and metadata.

```{r}
#| label: import-data

# occurance data
occurance_data <- read.csv(file = "Input_Data/combined_methods_long_data.csv", row.names = 1)

# get lat long from meta data
metadata <- read.csv(file = "Input_Data/metadata.csv", na.strings = c(""))
metadata <- metadata %>%
  subset(select = c(localityID, exposure, decimalLongitude, decimalLatitude)) %>% unique() %>% na.omit()

# add lat long to occurance
occurance_data <- left_join(occurance_data, metadata)

# filter to only species of interest
species_list <- c(
  "Semibalanus balanoides",
  "Phorcus lineatus",
  "Chthamalus montagui",
  "Perforatus perforatus",
  "Patella depressa",
  "Bifurcaria bifurcata",
  "Asterias rubens"
)

occurance_data_reduced <- occurance_data %>% filter(taxa %in% species_list)
str(occurance_data_reduced)
```

Split into species of interest for combined and individual methods.

```{r}
#| label: filter-species-of-interest

# Clean species names to use in object names (e.g., "Semibalanus balanoides" -> "semibalanus")
clean_name <- function(name) {
  tolower(gsub(" ", "_", name))
}

# Loop through each species and create the filtered data frames
for (species in species_list) {
  clean <- clean_name(species)
  
  assign(paste0(clean, "_obs_both_methods"),
         occurance_data_reduced %>%
           filter(taxa == species, pa == 1) %>%
           select(taxa, decimalLongitude, decimalLatitude) %>%
           rename(lat = decimalLatitude, lon = decimalLongitude, species = taxa))

  assign(paste0(clean, "_obs_eDNA"),
         occurance_data_reduced %>%
           filter(taxa == species, method == "eDNA", pa == 1) %>%
           select(taxa, decimalLongitude, decimalLatitude) %>%
           rename(lat = decimalLatitude, lon = decimalLongitude, species = taxa))

  assign(paste0(clean, "_obs_visual"),
         occurance_data_reduced %>%
           filter(taxa == species, method == "Visual", pa == 1) %>%
           select(taxa, decimalLongitude, decimalLatitude) %>%
           rename(lat = decimalLatitude, lon = decimalLongitude, species = taxa))
}

# Check the data to make sure it loaded correctly
head(semibalanus_balanoides_obs_eDNA)
```

```{r}
#| label: latlong-extent

# Determine geographic extent of our data
# find general latitudinal and longitudinal boundaries

max_lat <- ceiling(max(occurance_data_reduced$decimalLatitude))
min_lat <- floor(min(occurance_data_reduced$decimalLatitude))
max_lon <- ceiling(max(occurance_data_reduced$decimalLongitude))
min_lon <- floor(min(occurance_data_reduced$decimalLongitude))

# Store boundaries in a single extent object
geographic_extent <- ext(x = c(min_lon, max_lon, min_lat, max_lat))
uk_extent <- ext(-11, 2, 49.5, 61)  # Westernmost to easternmost, southernmost to northernmost

# plot features
wrld <- world(path=".")
```

### Import GBIF occurrences

We can also other occurrences from GBIF.

```{r}
#| label: download-from-GBIF-semibalanus

# Semibalanus
semibalanus_GBIF_obs <- geodata::sp_occurrence("semibalanus", "balanoides", geo=TRUE, ext = uk_extent)
dups <- duplicated(semibalanus_GBIF_obs[, c('lon', 'lat')])
semibalanus_GBIF_obs_nodups <- semibalanus_GBIF_obs[!dups, ]
semibalanus_GBIF_obs_nodups_recent <- subset(semibalanus_GBIF_obs_nodups, year >= 2020)
dim(semibalanus_GBIF_obs_nodups_recent)
  
# Phorcus
phorcus_GBIF_obs <- geodata::sp_occurrence("phorcus", "lineatus", geo=TRUE, ext = uk_extent)
dups <- duplicated(phorcus_GBIF_obs[, c('lon', 'lat')])
phorcus_GBIF_obs_nodups <- phorcus_GBIF_obs[!dups, ]
phorcus_GBIF_obs_nodups_recent <- subset(phorcus_GBIF_obs_nodups, year >= 2020)

# Chthamalus
chthamalus_GBIF_obs <- geodata::sp_occurrence("chthamalus", "montagui", geo=TRUE, ext = uk_extent)
dups <- duplicated(chthamalus_GBIF_obs[, c('lon', 'lat')])
chthamalus_GBIF_obs_nodups <- chthamalus_GBIF_obs[!dups, ]
chthamalus_GBIF_obs_nodups_recent <- subset(chthamalus_GBIF_obs_nodups, year >= 2020)

# Perforatus perforatus
perforatus_GBIF_obs <- geodata::sp_occurrence("perforatus", "perforatus", geo=TRUE, ext = uk_extent)
dups <- duplicated(perforatus_GBIF_obs[, c('lon', 'lat')])
perforatus_GBIF_obs_nodups <- perforatus_GBIF_obs[!dups, ]
perforatus_GBIF_obs_nodups_recent <- subset(perforatus_GBIF_obs_nodups, year >= 2020)

# Patella depressa
patella_GBIF_obs <- geodata::sp_occurrence("patella", "depressa", geo=TRUE, ext = uk_extent)
dups <- duplicated(patella_GBIF_obs[, c('lon', 'lat')])
patella_GBIF_obs_nodups <- patella_GBIF_obs[!dups, ]
patella_GBIF_obs_nodups_recent <- subset(patella_GBIF_obs_nodups, year >= 2020)

# Bifurcaria bifurcata
bifurcaria_GBIF_obs <- geodata::sp_occurrence("Bifurcaria", "bifurcata", geo=TRUE, ext = uk_extent)
dups <- duplicated(bifurcaria_GBIF_obs[, c('lon', 'lat')])
bifurcaria_GBIF_obs_nodups <- bifurcaria_GBIF_obs[!dups, ]
bifurcaria_GBIF_obs_nodups_recent <- subset(bifurcaria_GBIF_obs_nodups, year >= 2020)

# asterias rubens
star_GBIF_obs <- geodata::sp_occurrence("asterias", "rubens", geo=TRUE, ext = uk_extent)
dups <- duplicated(star_GBIF_obs[, c('lon', 'lat')])
star_GBIF_obs_nodups <- star_GBIF_obs[!dups, ]
star_GBIF_obs_nodups_recent <- subset(star_GBIF_obs_nodups, year >= 2020)
```

### Visualize occurrences

```{r}
#| label: plot-occurance-GBIF-data-semibalanus

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(semibalanus_GBIF_obs_nodups_recent$lon, semibalanus_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20)

# add my points
points(x = semibalanus_balanoides_obs_both_methods$decimalLongitude, 
       y = semibalanus_balanoides_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-phorcus

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(phorcus_GBIF_obs_nodups_recent$lon, phorcus_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20)

# add my points
points(x = phorcus_lineatus_obs_both_methods$decimalLongitude, 
       y = phorcus_lineatus_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-chthamalus

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(chthamalus_GBIF_obs_nodups_recent$lon, chthamalus_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20)

# add my points
points(x = chthamalus_montagui_obs_both_methods$decimalLongitude, 
       y = chthamalus_montagui_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-perforatus

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(perforatus_GBIF_obs_nodups_recent$lon, perforatus_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20)

# add my points
points(x = perforatus_perforatus_obs_both_methods$decimalLongitude, 
       y = perforatus_perforatus_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-patella

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(patella_GBIF_obs_nodups_recent$lon, patella_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20)

# add my points
points(x = patella_depressa_obs_both_methods$decimalLongitude, 
       y = patella_depressa_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-Bifurcaria

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(bifurcaria_GBIF_obs_nodups_recent$lon, bifurcaria_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20) # this looks wrong

# add my points
points(x = bifurcaria_bifurcata_obs_both_methods$decimalLongitude, 
       y = bifurcaria_bifurcata_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

```{r}
#| label: plot-occurance-GBIF-data-asterias

plot(wrld, xlim=c(-11,3), ylim=c(49,61), col="light yellow", border="light gray")

# add the GBIF points
points(star_GBIF_obs_nodups_recent$lon, star_GBIF_obs_nodups_recent$lat, col='darkgrey', pch=20) # this looks wrong

# add my points
points(x = asterias_rubens_obs_both_methods$decimalLongitude, 
       y = asterias_rubens_obs_both_methods$decimalLatitude, 
       col = "red", 
       pch = 20, 
       cex = 0.75)
```

### Sampling bias

```{r}

# make a SpatVector
semibalanus_spat <- vect(semibalanus_GBIF_obs_nodups_recent, geom=c("lon", "lat"), crs="+proj=longlat +datum=WGS84")
class(semibalanus_spat)

# create a SpatRaster with the extent of acgeo
r <- rast(semibalanus_spat)

# set the resolution of the cells to (for example) 1 degree
res(r) <- 1

# extend (expand) the extent of the SpatRaster a little
r <- extend(r, ext(r)+1)

# sample:
set.seed(13)
acsel <- spatSample(semibalanus_spat, size=1, "random", strata=r)

# to illustrate the method and show the result
p <- as.polygons(r)
plot(p, border='gray')
points(acv)
points(acsel, cex=1, col='red', pch='x') # selected points in red
```

## Absence and presence points (background points)

Let's sample background points within a radius of presence points (as seen in VanDerWal et al, 2009).

***Grey points*** are a random sample of 1000 points taken from within 30km around presence points. One point is sampled per raster cell to avoid spatial bias. These represent **candidate pseudo-absence locations** i.e. background points from within the accessible area.

***Blue points*** are a subset of the grey points. These are points whose raster cell center falls within the buffer circles. They represent **final valid** **pseudo-absences**.

```{r}
#| label: sample-psudo-absences

# circles with a radius of 30 km
x <- buffer(semibalanus_spat, 30000)
pol <- aggregate(x)

# take a random sample of points within the polygons. 
# We only want one point per grid cell, sampling randomly from all circles
set.seed(999)
samp1 <- spatSample(pol, 1000, "random")

# no raster cells multiple times
pcells <- cells(r, samp1)
pcells <- unique(pcells[,2]) # remote duplicates
xy <- xyFromCell(r, pcells) # back to coordinates

# choose to select only those cells that have centers within circles
spxy <- vect(xy, crs="+proj=longlat +datum=WGS84")
xyInside <- intersect(spxy, x)

# plots to inspect results
plot(pol, axes=TRUE)
points(samp1, pch="+", cex=.5)
points(xyInside, cex=0.75, pch=20, col='blue')
```

## Environmental data

It's time to find environmental variables of interest. OCLE (<https://ocle.ihcantabria.com/>) provides meteo-oceanographic data for UK coastal communities, some of which are projected under future climate change scenarios.

To match the resolution of the projected estimates, we are going to download annual mean for each variable. Summer mean is available for historic periods, but not for projected periods.

```{r}
#| label: plot-features

# set uk extent and colours
uk_extent <- extent(-11, 2, 49.5, 61)
cols <- colorRampPalette(c("blue", "lightblue", "yellow", "red"))(100)
```

### Temp, pH, terrain (Bio-ORCLE)

Bio-ORACLE is a comprehensive data set providing a wide range of marine environmental variables tailored for ecological and biogeographical analysis. These variables include surface and benthic values for parameters such as temperature, salinity, nutrients, oxygen, pH, and more, derived from satellite and modeled oceanographic data.

We use the `biooracler` package here to obtain our environmental variables of interest from current and projected periods.

```{r}
#| label: variables-from-biooracle

# explore layers
biooracler_layers <- biooracler::list_layers()

# example of selecting five variables from three datasets
datasets <- list(

  #air temps
  list(dataset_id = "tas_baseline_2000_2020_depthsurf",
       variables = "tas_mean",
       constraints = 
         list(#time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
              latitude = c(49.5, 61), longitude = c(-11, 2))),
  
  list(dataset_id = "tas_ssp585_2020_2100_depthsurf",
       variables = "tas_mean",
       constraints = 
         list(#time = c('2020-01-01T00:00:00Z', '2090-01-01T00:00:00Z'), 
              latitude = c(49.5, 61), longitude = c(-11, 2))),
  
  #ocean temps
  list(dataset_id = "thetao_baseline_2000_2019_depthsurf",
       variables = "thetao_mean",
       constraints = list(
         #time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
         latitude = c(49.5, 61), longitude = c(-11, 2))), 
  
  list(dataset_id = "thetao_ssp585_2020_2100_depthsurf",
       variables = "thetao_mean",
       constraints = list(
         #time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
         latitude = c(49.5, 61), longitude = c(-11, 2))), 
  
  # pH
  list(dataset_id = "ph_baseline_2000_2018_depthsurf",
       variables = "ph_mean",
       constraints = list(
         #time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
         latitude = c(49.5, 61), longitude = c(-11, 2))),
  
  list(dataset_id = "ph_ssp585_2020_2100_depthsurf",
       variables = "ph_mean",
       constraints = list(
         #time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
         latitude = c(49.5, 61), longitude = c(-11, 2))),
  
  list(dataset_id = "terrain_characteristics",
       variables = "coastline",
       constraints = list(
         #time = c('2000-01-01T00:00:00Z', '2010-01-01T00:00:00Z'), 
         latitude = c(49.5, 61), longitude = c(-11, 2)))
  
  )

# download layers
for (dataset in datasets) {
  
  dataset_id <- dataset$dataset_id
  variables <- dataset$variables
  constraints <- dataset$constraints
  
  layer <- download_layers(dataset_id, variables = variables, constraints = constraints)
  
  # Save using dataset_id
  save_path <- file.path("Processed_Data/BIO-ORACLE", paste0(dataset_id, ".rds"))
  saveRDS(layer, save_path)
}
```

```{r}
#| label: read-and-explore-variables

## ocean temp
ocean_temp_present = readRDS("Processed_Data/BIO-ORACLE/thetao_baseline_2000_2019_depthsurf.rds")
plot(
  ocean_temp_present,
  col = cols
)

ocean_temp_projected = readRDS("Processed_Data/BIO-ORACLE/thetao_ssp585_2020_2100_depthsurf.rds")
plot(
  ocean_temp_projected,
  col = cols
)

## air temp
air_temp_present = readRDS("Processed_Data/BIO-ORACLE/tas_baseline_2000_2020_depthsurf.rds")
plot(
  air_temp_present,
  col = cols
)

air_temp_projected = readRDS("Processed_Data/BIO-ORACLE/tas_ssp585_2020_2100_depthsurf.rds")
plot(
  air_temp_projected,
  col = cols
)

## ph
ph_present = readRDS("Processed_Data/BIO-ORACLE/ph_baseline_2000_2018_depthsurf.rds")
plot(ph_present,
     col = cols)

ph_projected = readRDS("Processed_Data/BIO-ORACLE/ph_ssp585_2020_2100_depthsurf.rds")
plot(ph_projected,
     col = cols)

# terrain
terrain <- readRDS("Processed_Data/BIO-ORACLE/terrain_characteristics.rds")
plot(terrain,
     main = "Terrain")
```

```{r}
#| label: create-stack

enviro_vars_current <- stack(
  c(ocean_temp_present,
    air_temp_present,
    ph_present,
    terrain
    ))

plot(enviro_vars_current) # plots each decade

enviro_vars_projected <- stack(
  c(ocean_temp_projected,
    air_temp_projected,
    ph_projected,
    terrain
    ))

plot(enviro_vars_projected) # plots each decade
```

### Rocky substrate (EMODnet)

We can get habitat data from EMODnet.

#### Tom's code

```{r}
#| label: get-emodnet-seabed-data

# import (1-min)
eusm23_total <- st_read(
  here::here("Processed_Data/Current_Enviro_Data/", "EUSeaMap_2023.gdb"),
  query =
    "select ModelCode, EUNIS2019C, EUNIS2019D, Shape_Area
                  #from \"EUSeaMap_2023\" "
) %>% filter(EUNIS2019C != "Na")

# rasterise (2.5 mins)
r_template <- rast(ext(eusm23_total), resolution = 0.0052, crs = "EPSG:4326")
eusm_r <- rasterize_polygons(eusm23_total, r_template)

# write output
writeRaster(eusm_r, filename = here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_0-5.tif"))
```

```{r}
#| label: tidy-emodnet-seabed-data

eusm_r <- terra::rast(here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_0-5.tif"))

eusm23_total <- eusm23_total %>%
  mutate(polygon_id = row_number()) %>%
  select(polygon_id, everything())

# 2km rasterization
r_template <- rast(ext(eusm23_total), resolution = 0.0208, crs = "EPSG:4326")
# create the raster
eusm_r_2km <- rasterize_polygons(eusm23_total, r_template)
# write to file
writeRaster(eusm_r_2km, filename = here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_2km.tif"))

# 12km rasterization
r_template <- rast(ext(eusm23_total), resolution = 0.1248, crs = "EPSG:4326")
# create the raster
eusm_r_12km <- rasterize_polygons(eusm23_total, r_template)
# write to file
writeRaster(eusm_r_12km, filename = here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_12km.tif"))
```

```{r}
#| label: reload-emodnet-seabed-data

# rasterised habitat data at full (~0.5km) and coarse resolutions
eusm_r <- terra::rast(here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_0-5.tif"))
eusm_r_2km <- terra::rast(here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_2km.tif"))
eusm_r_12km <- terra::rast(here::here("Processed_Data/Current_Enviro_Data/", "eusm_raster_12km.tif"))
```

```{r}
#| label: explore-emodnet-seabed-data

# Summary of the raster
eusm_r_2km

# Get metadata
ext(eusm_r_2km) # Spatial extent
res(eusm_r_2km) # Resolution

#crop
eusm_uk_2km <- crop(eusm_r_2km, uk_extent)

#inspect
plot(eusm_uk_2km)
```

#### Import straight from emodnet_wfs

```{r}
#| label: import-from-emodnet_wfs

# service information 
services <- emodnet_wfs()
services[, c("emodnet_thematic_lot", "service_name")]

# initialising a client is the first step to interacting with an EMODnet Web Feature Services
wfs_geo <- emodnet_init_wfs_client(service = "geology_seabed_substrate_maps")
wfs_seabed <- emodnet_init_wfs_client(service =  "seabed_habitats_general_datasets_and_products")

# List contents of a WFS
layer_info <- emodnet.wfs::emodnet_get_wfs_info(wfs_seabed)
layer_info
layers <- c("ukseamap_latest_habitats")

# get the data
emodnet_substrate <- emodnet_get_layers(wfs = wfs_seabed,
                                        layers = layers,
                                        simplify = TRUE)
unique(emodnet_substrate$country)
#emodnet_substrate_UK <- emodnet_substrate %>% filter(country == "Great Britain")

#plot
ggplot(emodnet_substrate) +
  geom_sf(aes(fill = folk_16cl_txt)) +
  scale_fill_viridis_d(option = "plasma", name = "Substrate Type") +
  coord_sf(crs = 4326) +
  theme_minimal() +
  labs(
    title = "EMODnet Habitat Map",
    x = "Longitude", y = "Latitude"
  )
```

### Visualize occurrence over variables

```{r}

# second layer of the SpatRaster (current ocean temp)

# we do not need the first column
semibalanus_balanoides_obs_both_methods  <- semibalanus_balanoides_obs_both_methods[,-1]

patella_depressa_obs_both_methods <- patella_depressa_obs_both_methods[,-1]

# semibalanus
plot(enviro_vars_current, 2, col = cols)
lines(wrld)
points(semibalanus_balanoides_obs_both_methods,
       col='blue')

# patella
plot(enviro_vars_current, 2, col = cols)
lines(wrld)
points(patella_depressa_obs_both_methods,
       col='blue')
```

### Extract value of predictors at occurrence points

We use the `extract` function from the `raster` package.

```{r}
#| label: extract-values

#extract
presvals_semibalanus <- extract(enviro_vars_current, semibalanus_balanoides_obs_both_methods) 

head(presvals_semibalanus)
```

We can see that some points are being treated as land rather than sea (we've got quite a few NAs). We need to find the closest point which is classed as coastline and use that instead.

```{r}
#| label: correct-points

# call function we created eariler to correct points
presvals_semibalanus_corrected <- get_nearest_coastline(
  enviro_vars_current,
  semibalanus_balanoides_obs_both_methods,
  terrain)

# remove the ID variable
presvals_semibalanus_corrected <- presvals_semibalanus_corrected[,-1]
```

```{r}

# setting random seed to always create the same
# random set of points for this example
set.seed(0)
backgr <- spatSample(enviro_vars_current, 500, "random", as.points=TRUE, na.rm=TRUE)
absvals <- values(backgr)
pb <- c(rep(1, nrow(presvals_semibalanus_corrected)), rep(0, nrow(absvals)))
sdmdata <- data.frame(cbind(pb, rbind(presvals_semibalanus_corrected, absvals)))
head(sdmdata)
tail(sdmdata)
summary(sdmdata)
```

### Check co-linearity

```{r}
#| label: check-colinearity

pairs(sdmdata[,2:5], cex=0.1) #air temp and ocean temp highly correlate
pairs(sdmdata[,5:8], cex=0.1) #pH with temp looks fine
```

## Model fitting

```{r}

m1 <- glm(pb ~ thetao_mean_2 + ph_mean_2, data=sdmdata)
class(m1)

summary(m1)
```

## Model prediction

```{r}

bc <- envelope(presvals_semibalanus_corrected[,c("thetao_mean_2", "ph_mean_2")])
bc

```

## Model evaluation
